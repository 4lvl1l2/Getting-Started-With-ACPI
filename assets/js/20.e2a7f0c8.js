(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{338:function(e,t,o){e.exports=o.p+"assets/img/ssdttime.0bc50ec0.png"},339:function(e,t,o){e.exports=o.p+"assets/img/patchmerge.5bb6fb39.png"},401:function(e,t,o){"use strict";o.r(t);var i=o(10),r=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"ssdts-the-easy-way"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ssdts-the-easy-way"}},[e._v("#")]),e._v(" SSDTs: The easy way")]),e._v(" "),t("p",[e._v("So here we'll be using a super simple tool made by CorpNewt: "),t("a",{attrs:{href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDTTime"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("What this tool does is, it dumps your DSDT from your firmware, and then creates SSDTs based off your DSDT. "),t("strong",[e._v("This must be done on the target machine running either Windows or Linux")])]),e._v(" "),t("h2",{attrs:{id:"so-what-can-t-ssdttime-do"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#so-what-can-t-ssdttime-do"}},[e._v("#")]),e._v(" So what "),t("strong",[e._v("CAN'T")]),e._v(" SSDTTime do")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("SSDT-GPI0")]),e._v(":\n"),t("ul",[t("li",[e._v("Need to be configured to your system")])])]),e._v(" "),t("li",[t("strong",[e._v("IMEI SSDT")]),e._v(":\n"),t("ul",[t("li",[e._v("If you have either a Sandy bridge CPU with 7 series motherboard or Ivy Bridge with 6 series motherboard, you'll need to either use the prebuilt or manually create it.")])])])]),e._v(" "),t("p",[e._v('For users who don\'t have all the options available to them in SSDTTime, you can follow the "SSDTs: The long way" section. You can still use SSDTTime for SSDTs it does support.')]),e._v(" "),t("h2",{attrs:{id:"running-ssdttime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#running-ssdttime"}},[e._v("#")]),e._v(" Running SSDTTime")]),e._v(" "),t("p",[e._v("Run the "),t("code",[e._v("SSDTTime.bat")]),e._v(" file as Admin on the target machine and you should see something like this:")]),e._v(" "),t("p",[t("img",{attrs:{src:o(338),alt:""}})]),e._v(" "),t("p",[e._v("What are all these options?:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("1. FixHPET - Patch out IRQ Conflicts")]),e._v(" "),t("ul",[t("li",[e._v("IRQ patching, mainly needed for X79, X99 and laptop users(use option "),t("code",[e._v("C")]),e._v(" to omit conflicting legacy IRQs)")])])]),e._v(" "),t("li",[t("code",[e._v("2. FakeEC - OS-aware Fake EC")]),e._v(" "),t("ul",[t("li",[e._v("This is the SSDT-EC, required for Catalina and newer users")])])]),e._v(" "),t("li",[t("code",[e._v("3. FakeEC Laptop - OS-aware Fake EC - Leaves Existing Untouched")]),e._v(" "),t("ul",[t("li",[e._v("This is the SSDT-EC, but the laptop version only Builds Fake EC and leaves the existing EC devices untouched, again required for Catalina and newer users")])])]),e._v(" "),t("li",[t("code",[e._v("4. USBX - Power properties for USB on SKL and newer SMBIOS")]),e._v(" "),t("ul",[t("li",[e._v("This is the SSDT-USBX.  The prebuilt version can be used if desired, but SSDTTime can build a customizable version of SSDT-USBX.")])])]),e._v(" "),t("li",[t("code",[e._v("5. PluginType - Sets plugin-type = 1 on First ProcessorObj")]),e._v(" "),t("ul",[t("li",[e._v("This is the SSDT-PLUG, and can be used on Haswell and newer.  Will also check and redefine processor objects for 12th generation and newer Intel and AMD systems.")])])]),e._v(" "),t("li",[t("code",[e._v("6. PMC - Sets Power Management controller status")]),e._v(" "),t("ul",[t("li",[e._v("This is the SSDT-PMC, for Intel true 300+ series only, this device is missing from ACPI in recent boards and helps to bring back NVRAM support.")])])]),e._v(" "),t("li",[t("code",[e._v("7. RTCAWAC - Context-Aware AWAC Disable and RTC Enable/Fake/Range Fix")]),e._v(" "),t("ul",[t("li",[e._v("This is the SSDT-AWAC/RTC0, its purpose is to fix the system clocks found on newer hardware, and also enable, fake, and/or fix the RTC range.")])])]),e._v(" "),t("li",[t("code",[e._v("8. USB Reset - Reset USB controllers to allow hardware mapping")]),e._v(" "),t("ul",[t("li",[e._v("This is SSDT-RHUB, used for resetting USB ports in macOS for Asus's Z490 motherboards")])])]),e._v(" "),t("li",[t("code",[e._v("9. PCI Bridge - Create missing PCI bridges for passed device path")]),e._v(" "),t("ul",[t("li",[e._v("This will create missing PCI bridges necessary for passing device path.")])])]),e._v(" "),t("li",[t("code",[e._v("0. PNLF - Sets up a PNLF device for laptop backlight control.")]),e._v(" "),t("ul",[t("li",[e._v("This a customized SSDT-PNLF, tailored for the specific system.  This is not automatic and you must specify the generation of the iGPU.")])])]),e._v(" "),t("li",[t("code",[e._v("A. XOSI - _OSI rename and patch to return true for a range of Windows versions - also checks for OSID")]),e._v(" "),t("ul",[t("li",[e._v("This is SSDT-XOSI, can also create a patch for OSID and keep it in the correct order.")])])]),e._v(" "),t("li",[t("code",[e._v("B. Fix DMAR - Remove Reserved Memory Regions from the DMAR Table")]),e._v(" "),t("ul",[t("li",[e._v("This is primarily needed for devices that require VT-d functionality such as: I225 based ethernet controllers, Aquantia Ethernet Controllers and some WiFi Devices.")])])]),e._v(" "),t("li",[t("code",[e._v("P. Dump DSDT - Automatically dump the system DSDT")]),e._v(" "),t("ul",[t("li",[e._v("Dumps your DSDT from your firmware")])])])]),e._v(" "),t("p",[e._v("What we want to do is select option "),t("code",[e._v("P. Dump DSDT")]),e._v(" first, then select the appropriate option(s) for your system.")]),e._v(" "),t("blockquote",[t("p",[e._v("What about USBX?")])]),e._v(" "),t("p",[e._v("For Skylake and newer plus AMD, you can either build SSDT-USBX with SSDTTime or grab a pre-built file here: "),t("a",{attrs:{href:"https://github.com/dortania/OpenCore-Post-Install/blob/master/extra-files/SSDT-USBX.aml",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-USBX.aml"),t("OutboundLink")],1),e._v(". This file is plug and play and requires no device configuration, "),t("strong",[e._v("do not use on Broadwell and older")]),e._v(".")]),e._v(" "),t("p",[t("strong",[e._v("Troubleshooting note")]),e._v(": See "),t("a",{attrs:{href:"https://dortania.github.io/OpenCore-Install-Guide/troubleshooting/troubleshooting.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("General Troubleshooting"),t("OutboundLink")],1),e._v(" if you're having issues running SSDTTime")]),e._v(" "),t("h2",{attrs:{id:"adding-to-opencore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#adding-to-opencore"}},[e._v("#")]),e._v(" Adding to OpenCore")]),e._v(" "),t("h3",{attrs:{id:"manual-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manual-method"}},[e._v("#")]),e._v(" Manual Method")]),e._v(" "),t("p",[e._v("Don't forget that SSDTs need to be added to OpenCore, reminder that .aml is compiled, .dsl is code. "),t("strong",[e._v("Add only the .aml file")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("EFI/OC/ACPI")]),e._v(" "),t("li",[e._v("config.plist -> ACPI -> Add")])]),e._v(" "),t("p",[e._v("Reminder that Cmd/Ctrl+R with ProperTree pointed at your OC folder will add all your SSDTs, kexts and .efi drivers to the config for you. "),t("strong",[e._v("Do not add your DSDT to OpenCore, its already in your firmware")]),e._v(". If you are unsure what this is referring to, go back to the OpenCore guide and select your config based of the architecture of your CPU.")]),e._v(" "),t("p",[e._v("For those who do not yet have a "),t("code",[e._v("config.plist")]),e._v(", you'll want to next head back to your respective OpenCore guides and create the config.plist:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://dortania.github.io/OpenCore-Install-Guide/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenCore Install guide"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("Users of "),t("code",[e._v("FixHPET")]),e._v(", "),t("code",[e._v("XOSI")]),e._v(", and "),t("code",[e._v("RTCAWAC")]),e._v(" will also need to merge "),t("code",[e._v("oc_patches.plist")]),e._v(" into their "),t("code",[e._v("config.plist")])]),e._v(" "),t("p",[e._v("Steps to do this:")]),e._v(" "),t("ul",[t("li",[e._v("Open both files,")]),e._v(" "),t("li",[e._v("Delete the "),t("code",[e._v("ACPI -> Patch")]),e._v(" section from config.plist")]),e._v(" "),t("li",[e._v("Copy the "),t("code",[e._v("ACPI -> Patch")]),e._v(" section from patches.plist")]),e._v(" "),t("li",[e._v("Paste into where old patches were in config.plist")])]),e._v(" "),t("h3",{attrs:{id:"patchmerge-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#patchmerge-method"}},[e._v("#")]),e._v(" PatchMerge method")]),e._v(" "),t("p",[t("strong",[e._v("NOTE:")]),e._v(" This method does require that you have your "),t("code",[e._v("config.plist")]),e._v(" already created.  If you have not done so, please start on the "),t("a",{attrs:{href:"https://dortania.github.io/OpenCore-Install-Guide/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenCore Install guide"),t("OutboundLink")],1),e._v(" before running this tool.")]),e._v(" "),t("p",[e._v("SSDTTime now includes a separate script called PatchMerge.  This script will automatically merge the patches you selected previously into your "),t("code",[e._v("config.plist")]),e._v(".")]),e._v(" "),t("p",[e._v("Run "),t("code",[e._v("PatchMerge.bat")]),e._v(" you will be presented with this screen:")]),e._v(" "),t("p",[t("img",{attrs:{src:o(339),alt:""}})]),e._v(" "),t("p",[e._v("Select option "),t("code",[e._v("1. Select config.plist")]),e._v(" to begin the process.  Once done, your patches will be stored in a "),t("code",[e._v("config.plist")]),e._v(" inside the Results folder.  You will need to verify that copy of your "),t("code",[e._v("config.plist")]),e._v(" with your existing one, making sure everything is intact and the patches inserted properly.  Then copy both the "),t("code",[e._v("config.plist")]),e._v(" and the SSDTs from the Results folder to your "),t("code",[e._v("EFI/OC")]),e._v(" and "),t("code",[e._v("EFI/OC/ACPI")]),e._v(" folders respectively.")])])}),[],!1,null,null,null);t.default=r.exports}}]);